from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from utils.data_loader import get_command_info, get_category,  get_all_categories, load_commands
from keyboards.button import main_buttons_kb, category_name

router = Router()  

@router.message(Command("start"))  
async def cmd_start(message: Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç!, –≤–æ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –º–æ–∏ –∫–æ–º–∞–Ω–¥—ã:",
        reply_markup=main_buttons_kb()
    )

class CommandSearch(StatesGroup):
    waiting_for_name = State()
    

class CategorySearch(StatesGroup):
    waiting_for_category = State()

@router.message(F.text == "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏")
async def ask_catigory_name(message: Message, state: FSMContext):
    cats = get_all_categories()
    if not cats:
        await message.answer("–í –±–∞–∑–µ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
        return
    await message.answer(
        text="–í—ã–±–µ—Ä–µ—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é",
        reply_markup = category_name(cats)
        )
    await state.set_state(CategorySearch.waiting_for_category)


@router.message(CategorySearch.waiting_for_category)
async def show_category(message: Message, state: FSMContext):
    category = message.text.strip()
    commands = get_category(category)
    if not commands:
        try:
            all_cmds = load_commands()
            cats = sorted({(d.get("category") or "<–Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏>"). strip() for d in all_cmds.values()})
            await message.answer(
                f"DEBUG: –í—ã –≤—ã–±—Ä–∞–ª–∏:'{category}'\n"
                f"–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –±–∞–∑–µ: {cats}\n"
                f"–í—Å–µ–≥–æ –∫–æ–º–∞–Ω–¥ –≤ –±–∞–∑–µ: {len(all_cmds)}"
            )
        except Exception as e:
            await message.answer(f"DEBUG: –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –±–∞–∑—ã: {e}")
        await message.answer("–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç –∫–æ–º–∞–Ω–¥")
        await state.clear()
        return
    
    lines = []
    for name, info in commands.items():
        desc = info.get("description", "-")
        example = info.get("example", "")
        link = info.get("link", "")
        lines.append(f"*{name}* - {desc}\n'{example}'\n{link}\n")
    
    def chunk_lines(lines, limit=3900):
        cur = ""
        for line in lines:
            if len(cur) + len(line) + 1 > limit:
                yield cur
                cur = line
            else:
                cur = cur + "\n" + line if cur else line
        if cur:
            yield cur
        
    for chunk in chunk_lines(lines):
        await message.answer(chunk, parse_mode="Markdown")
    await state.clear()
        

@router.message(F.text == "–ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏")
async def ask_command_name(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã")
    await state.set_state(CommandSearch.waiting_for_name)


@router.message(CommandSearch.waiting_for_name)
async def show_command_info(message: Message, state: FSMContext):
    cmd = message.text.strip().lower()
    info = get_command_info(cmd)

    if info:
        await message.answer(
             f"üîπ –ö–æ–º–∞–Ω–¥–∞: {cmd}\n"
            f"üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: {info['description']}\n"
            f"üß™ –ü—Ä–∏–º–µ—Ä: {info['example']}\n"
            f"üìö –ü–æ–¥—Ä–æ–±–Ω–µ–µ: {info['link']}"
        )
    else:
        await message.answer("–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑")
    await state.clear()