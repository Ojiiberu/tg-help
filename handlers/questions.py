from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from utils.data_loader import get_command_info

from keyboards.button import main_buttons_kb, categories

router = Router()  

@router.message(Command("start"))  
async def cmd_start(message: Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç!, –≤–æ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –º–æ–∏ –∫–æ–º–∞–Ω–¥—ã:",
        reply_markup=main_buttons_kb()
    )

@router.message(F.text.lower() == "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏")
async def answer_yes(message: Message):
    await message.answer(
        "–ö–∞–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç",
        reply_markup=categories()
    )

class CommandSearch(StatesGroup):
    waiting_for_name = State()

@router.message(F.text == "–ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏")
async def ask_command_name(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã")
    await state.set_state(CommandSearch.waiting_for_name)


@router.message(CommandSearch.waiting_for_name)
async def show_command_info(message: Message, state: FSMContext):
    cmd = message.text.strip().lower()
    info = get_command_info(cmd)

    if info:
        await message.answer(
             f"üîπ –ö–æ–º–∞–Ω–¥–∞: {cmd}\n"
            f"üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: {info['description']}\n"
            f"üß™ –ü—Ä–∏–º–µ—Ä: {info['example']}\n"
            f"üìö –ü–æ–¥—Ä–æ–±–Ω–µ–µ: {info['link']}"
        )
    else:
        await message.answer("–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑")
    await state.clear()