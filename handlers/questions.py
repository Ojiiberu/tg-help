from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from utils.data_loader import get_command_info, get_category,  get_all_categories, load_commands, random_command
from keyboards.button import main_buttons_kb, category_name, back_button

router = Router()  

@router.message(Command("start"))  
async def cmd_start(message: Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç!, –≤–æ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –º–æ–∏ –∫–æ–º–∞–Ω–¥—ã:",
        reply_markup=main_buttons_kb()
    )



class CommandSearch(StatesGroup):
    waiting_for_name = State()
    

class CategorySearch(StatesGroup):
    waiting_for_category = State()


@router.message(F.text == "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏")
async def ask_catigory_name(message: Message, state: FSMContext):
    cats = get_all_categories()
    if not cats:
        await message.answer("–í –±–∞–∑–µ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
        return
    await message.answer(
        text="–í—ã–±–µ—Ä–µ—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é",
        reply_markup = category_name(cats, include_back=True)
        )
    await state.set_state(CategorySearch.waiting_for_category)


@router.message(CategorySearch.waiting_for_category, F.text.in_("–Ω–∞–∑–∞–¥"))
async def back_from_category(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_buttons_kb())
    
    
    
@router.message(CategorySearch.waiting_for_category)
async def show_category(message: Message, state: FSMContext):   
    text = message.text.strip()
    if text.lower() in ("–Ω–∞–∑–∞–¥"):
        await state.clear()
        await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_buttons_kb())
        return
    category = text
    commands = get_category(category)
    if not commands:
        cats = get_all_categories()
        await message.answer(
            "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –≤ –Ω–µ–π –Ω–µ—Ç –∫–æ–º–∞–Ω–¥.\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ù–∞–∑–∞–¥' ",
            reply_markup=category_name(cats, include_back=True)
        )
        return

    lines = []
    for name, info in commands.items():
        desc = info.get("description", "-")
        example = info.get("example", "")
        link = info.get("link", "")
        lines.append(f"*{name}* - {desc}\n'{example}'\n{link}\n")
    
    def chunk_lines(lines, limit=3900):
        cur = ""
        for line in lines:
            if len(cur) + len(line) + 1 > limit:
                yield cur
                cur = line
            else:
                cur = cur + "\n" + line if cur else line
        if cur:
            yield cur
        
    for chunk in chunk_lines(lines):
        await message.answer(chunk, parse_mode="Markdown")

    cats = get_all_categories()
    await message.answer(
        "–ú–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–ª–∏ –Ω–∞–∂–∞—Ç—å '–ù–∞–∑–∞–¥', —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é",
        reply_markup=category_name(cats, include_back=True)
    )
        

@router.message(F.text == "–ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏")
async def ask_command_name(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ù–∞–∑–∞–¥' –¥–ª—è –≤—ã—Ö–æ–¥–∞", reply_markup=back_button() )
    await state.set_state(CommandSearch.waiting_for_name)

@router.message(CommandSearch.waiting_for_name, F.text.in_("–Ω–∞–∑–∞–¥"))
async def back_from_name(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_buttons_kb())

@router.message(CommandSearch.waiting_for_name)
async def show_command_info(message: Message, state: FSMContext):
    text = message.text.strip()
    if text.lower() in ("–Ω–∞–∑–∞–¥"):
        await state.clear()
        await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_buttons_kb())
        return

    cmd = message.text.strip().lower()
    info = get_command_info(cmd)

    if info:
        await message.answer(
             f"üîπ –ö–æ–º–∞–Ω–¥–∞: {cmd}\n"
            f"üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: {info['description']}\n"
            f"üß™ –ü—Ä–∏–º–µ—Ä: {info['example']}\n"
            f"üìö –ü–æ–¥—Ä–æ–±–Ω–µ–µ: {info['link']}"
        )
    else:
        await message.answer("–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑")
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ù–∞–∑–∞–¥'",
        reply_markup=back_button()
    )

# @router.message(CategorySearch.waiting_for_category, F.text == "–ù–∞–∑–∞–¥")
# async def back_from_category(message: Message, state: FSMContext):
#     await state.clear()
#     await message.answer(
#         "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
#         reply_markup=main_buttons_kb()
#     )
# @router.message(CommandSearch.waiting_for_name, F.text == "–Ω–∞–∑–∞–¥")
# async def back_from_name(message: Message, state: FSMContext):
#     await state.clear()
#     await message.answer(
#         "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
#         reply_markup=main_buttons_kb()
#     )

@router.message(F.text == "–°–ª—É—á–∞–π–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
async def random_command_show(message: Message):
    rand = random_command()
    if rand:
        await message.answer(
            f"–ö–æ–º–∞–Ω–¥–∞: {rand['name']}\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {rand['description']}\n"
            f"–ü—Ä–∏–º–µ—Ä: {rand['example']}\n"
            f"–ü–æ–¥—Ä–æ–±–Ω–µ–µ: {rand['link']}"
        )
    else:
        await message.answer("–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥")



# —Ö–µ–ª–ø